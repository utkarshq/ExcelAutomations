Option Explicit

'#################################################################################
'##  Description: This VBA script uses the OpenAI API endpoint "completions" to generate
'##               a text completion based on the selected rows (cells in the input and prompt columns)
'##               and displays the results in the result column. The API key is required to use the API,
'##               and it should be added as a constant at the top of the script.
'##               To get an API key, sign up for an OpenAI API key at https://openai.com/api/
'#################################################################################

'=====================================================
' GET YOUR API KEY: https://openai.com/api/
Const API_KEY As String = ""
'=====================================================

' Constants for API endpoint and request properties
Const API_ENDPOINT As String = "https://api.openai.com/v1/completions"
Const MODEL As String = "gpt-3.5-turbo-instruct"
Const MAX_TOKENS As String = "1024"
Const TEMPERATURE As String = "0.5"

' Define worksheet name
Const WORKSHEET_NAME As String = "Sheet1" ' Change this to your desired worksheet name

' Define column letters for input, prompt, and result
Const INPUT_COLUMN As String = "C" ' Column for input data
Const PROMPT_COLUMN As String = "D" ' Column for prompts
Const RESULT_COLUMN As String = "E" ' Column for results

Sub OpenAI_Completion()
    On Error GoTo ErrorHandler
    Application.ScreenUpdating = False

    ' Check if API key is available
    If API_KEY = "" Then
        MsgBox "Please input a valid API key. You can get one from https://openai.com/api/", vbCritical, "No API Key Found"
        Application.ScreenUpdating = True
        Exit Sub
    End If

    ' Define worksheet
    Dim ws As Worksheet
    On Error Resume Next
    Set ws = ThisWorkbook.Sheets(WORKSHEET_NAME)
    If ws Is Nothing Then
        MsgBox "Worksheet '" & WORKSHEET_NAME & "' not found.", vbCritical, "Worksheet Error"
        Application.ScreenUpdating = True
        Exit Sub
    End If
    On Error GoTo ErrorHandler

    ' Loop through selected rows (based on selection in the input column)
    Dim selectedRange As Range
    On Error Resume Next
    Set selectedRange = Intersect(Application.Range(INPUT_COLUMN & ":" & INPUT_COLUMN), Selection)
    On Error GoTo ErrorHandler

    If selectedRange Is Nothing Then
        MsgBox "No rows selected for execution.", vbInformation, "No Selection"
        Application.ScreenUpdating = True
        Exit Sub
    End If

    Dim cell As Range
    For Each cell In selectedRange
        Dim inputContext As String
        Dim prompt As String
        Dim combinedPrompt As String
        Dim cellInput As Range
        Dim cellPrompt As Range
        Dim cellResult As Range

        Set cellInput = ws.Cells(cell.row, INPUT_COLUMN)
        Set cellPrompt = ws.Cells(cell.row, PROMPT_COLUMN)
        Set cellResult = ws.Cells(cell.row, RESULT_COLUMN)

        ' Read input context and prompt
        inputContext = Trim(cellInput.Value)
        prompt = Trim(cellPrompt.Value)

        ' Combine input context and prompt
        If inputContext <> "" And prompt <> "" Then
            combinedPrompt = inputContext & " " & prompt ' Adjust this as needed to fit your specific format
        ElseIf prompt <> "" Then
            combinedPrompt = prompt ' Only prompt is available
        Else
            ' Skip this row if both input and prompt are empty
            GoTo NextCell
        End If

        ' Clean combined prompt to avoid parsing error in JSON payload
        combinedPrompt = CleanJSONString(combinedPrompt)

        ' Create XMLHTTP object
        Dim httpRequest As Object
        Set httpRequest = CreateObject("MSXML2.XMLHTTP")

        ' Define request body
        Dim requestBody As String
        requestBody = "{" & _
                """model"": """ & MODEL & """," & _
                """prompt"": """ & combinedPrompt & """," & _
                """max_tokens"": " & MAX_TOKENS & "," & _
                """temperature"": " & TEMPERATURE & _
                "}"

        ' Open and send the HTTP request
        With httpRequest
            .Open "POST", API_ENDPOINT, False
            .SetRequestHeader "Content-Type", "application/json"
            .SetRequestHeader "Authorization", "Bearer " & API_KEY
            .send (requestBody)
        End With

        ' Check if the request is successful
        If httpRequest.Status = 200 Then
            ' Parse the JSON response
            Dim response As String
            response = httpRequest.responseText

            ' Get the completion and clean it up
            Dim completion As String
            completion = ParseResponse(response)

            ' Write the completion to the result cell
            cellResult.Value = ReplaceBackslash(completion)
        Else
            MsgBox "Request failed with status " & httpRequest.Status & vbCrLf & vbCrLf & "ERROR MESSAGE:" & vbCrLf & httpRequest.responseText, vbCritical, "OpenAI Request Failed"
        End If

NextCell:
    Next cell

    Application.ScreenUpdating = True
    Exit Sub

ErrorHandler:
    MsgBox "Error " & Err.Number & ": " & Err.Description & vbCrLf & "Line: " & Erl, vbCritical, "Error"
    Application.ScreenUpdating = True
End Sub

' Helper function to parse the response text
Function ParseResponse(ByVal response As String) As String
    On Error Resume Next
    Dim json As Object
    Set json = JsonConverter.ParseJson(response)
    
    If Not json Is Nothing Then
        Dim text As String
        text = json("choices")(1)("text") ' Ensure correct indexing, might need to be (0) depending on the API response
        ParseResponse = text
    Else
        ParseResponse = "Failed to parse response"
    End If
    On Error GoTo 0
End Function

' Helper function to clean text
Function CleanJSONString(inputStr As String) As String
    On Error Resume Next
    ' Remove line breaks
    CleanJSONString = Replace(inputStr, vbCrLf, "")
    CleanJSONString = Replace(CleanJSONString, vbCr, "")
    CleanJSONString = Replace(CleanJSONString, vbLf, "")

    ' Replace all double quotes with single quotes
    CleanJSONString = Replace(CleanJSONString, """", "'")
    On Error GoTo 0
End Function

' Replaces the backslash character only if it is immediately followed by a double quote.
Function ReplaceBackslash(text As Variant) As String
    On Error Resume Next
    Dim i As Integer
    Dim newText As String
    newText = ""
    For i = 1 To Len(text)
        If Mid(text, i, 2) = "\" & Chr(34) Then
            newText = newText & Chr(34)
            i = i + 1
        Else
            newText = newText & Mid(text, i, 1)
        End If
    Next i
    ReplaceBackslash = newText
    On Error GoTo 0
End Function


